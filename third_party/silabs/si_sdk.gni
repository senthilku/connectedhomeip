# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/efr32_sdk.gni")
import("//build_overrides/jlink.gni")
import("//build_overrides/mbedtls.gni")

import("${chip_root}/src/lib/lib.gni")
import("si_board.gni")

declare_args() {
  # Location of the si SDK.
  sdk_support_root = "${chip_root}/third_party/silabs/matter_support"
  wisemcu_sdk_root = "${chip_root}/third_party/silabs/wisemcu-wifi-bt-sdk"


  #Build openthread with prebuilt silabs lib
  use_silabs_thread_lib = false
  enable_openthread_cli = true
  kvs_max_entries = 75

  use_external_flash = true
}

# Defines an efr32 SDK build target.
#
# Parameters:
#   efr32_sdk_root - The location of the erf32 SDK.
#   sources - The sources files to build.
template("si_sdk") {
  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    libs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    # Treat these includes as system includes, so warnings in them are not fatal.
    _include_dirs = [
      "${wisemcu_sdk_root}/third_party/freertos/include",
      "${wisemcu_sdk_root}/third_party/freertos/portable",

      "${wisemcu_sdk_root}/platforms/si91x/core/chip/inc",
      "${wisemcu_sdk_root}/platforms/si91x/core/config",
      "${wisemcu_sdk_root}/platforms/si91x/drivers/peripheral_drivers/inc",
      "${wisemcu_sdk_root}/platforms/si91x/drivers/cmsis_driver/config",
      "${wisemcu_sdk_root}/platforms/si91x/drivers/rom_driver/inc",
      "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/inc",
      "${wisemcu_sdk_root}/platforms/si91x/drivers/cmsis_driver",
      "${wisemcu_sdk_root}/platforms/si91x/drivers/cmsis_driver/CMSIS/Driver/Include",
      "${wisemcu_sdk_root}/platforms/si91x/boards/brd4325a/inc",

      "${wisemcu_sdk_root}/sapi/rtos/freertos_wrapper",
      "${wisemcu_sdk_root}/sapi/include",
    ]

    # Note that we're setting the mbedTLS and PSA configuration files through a
    # define. This means the build system by default does not pick up changes in
    # the content of these, only when changing the filename itself.
    # To fix this, these files are also manually depended upon in the source set
    # declared in efr32_mbedtls_config further down this file.
    defines = [
      "MBEDTLS_CONFIG_FILE=\"si917-chip-mbedtls-config.h\"",
      "__STARTUP_CLEAR_BSS",
      "HARD_FAULT_LOG_ENABLE",
      "EFR32_LOG_ENABLED=1",
      "NVM3_DEFAULT_NVM_SIZE=40960",
      "NVM3_DEFAULT_MAX_OBJECT_SIZE=4092",
      "KVS_MAX_ENTRIES=${kvs_max_entries}",
      "EFR32_OPENTHREAD_API",
      "PHY=EMBER_PHY_RAIL",
      "CORTEXM3",
      "MICRO=EMBER_MICRO_CORTEXM3_EFR32",
      "PLAT=EMBER_PLATFORM_CORTEXM3",
      #"${efr32_mcu}=1",
      #"${efr32_board}=1",
      "SL_SUPRESS_DEPRECATION_WARNINGS_SDK_3_1",
      "__HEAP_SIZE=0",
      "SL_CATALOG_FREERTOS_KERNEL_PRESENT=1",
      "MBEDTLS_THREADING_C=1",
      "MBEDTLS_THREADING_ALT=1",
      "SL_THREADING_ALT=1",
      "SL_COMPONENT_CATALOG_PRESENT",
      "PLATFORM_HEADER=\"platform-header.h\"",
      "USE_NVM3=1",

      "CCP_SI917_BRINGUP=1",
    ]

    defines += board_defines

    if (defined(invoker.enable_sleepy_device)) {
      if (invoker.enable_sleepy_device) {
        defines += [
          "CHIP_DEVICE_CONFIG_ENABLE_SED=1",
          "SL_CATALOG_POWER_MANAGER_PRESENT",
          "SL_CATALOG_SLEEPTIMER_PRESENT",
        ]
      }
    }

    if (chip_build_libshell) {  # matter shell
      defines += [
        "ENABLE_CHIP_SHELL",
        "OPENTHREAD_CONFIG_CLI_TRANSPORT=OT_CLI_TRANSPORT_CONSOLE",
        "CHIP_DEVICE_CONFIG_THREAD_ENABLE_CLI=1",
      ]
    } else {
      if (enable_openthread_cli) {  # ot-cli only
        defines += [ "CHIP_DEVICE_CONFIG_THREAD_ENABLE_CLI=1" ]
      }
    }

    # USART include files
    if ((defined(invoker.chip_enable_pw_rpc) && invoker.chip_enable_pw_rpc) ||
    chip_build_libshell || enable_openthread_cli ||
    (defined(invoker.use_wf200) && invoker.use_wf200) ||
    (defined(invoker.show_qr_code) && invoker.show_qr_code) ||
    (defined(invoker.disable_lcd) && !invoker.disable_lcd) ||
    (defined(invoker.use_external_flash) && use_external_flash)) {
      defines += [ "CONFIG_ENABLE_UART" ]

      if (defined(invoker.use_external_flash) && use_external_flash) {
        defines += [ "CONFIG_USE_EXTERNAL_FLASH" ]

      }

      cflags = []
      foreach(include_dir, _include_dirs) {
        cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
      }

      cflags += [
        "-Wno-maybe-uninitialized",
        "-Wno-shadow",
      ]

      if (defined(invoker.use_rs911x)) {
        if (invoker.use_rs911x == true) {
        #add compilation flags for rs991x build. This will be addressed directly in wiseconnect sdk in the next version release of that sdk
          cflags += invoker.rs911x_cflags
        }
      }

      if (defined(invoker.defines)) {
        defines += invoker.defines
      }
    }

    source_set("si917_mbedtls_config") {
    # We're setting the mbedTLS config flags here as the efr32_sdk target
    # acts as the mbedTLS target for EFR32 builds. We need this for the build
    # system to recompile mbedTLS (= the SDK) when the mbedTLS config gets
    # edited.
      sources = [
        "${chip_root}/src/platform/Silabs/SI917/si917-chip-mbedtls-config.h",
      ]

      public_deps = [ "${chip_root}/src/crypto:crypto_buildconfig" ]
    }

    source_set(sdk_target_name) {
      sources = [
      ######## CCP Platform #########
        "${wisemcu_sdk_root}/platforms/si91x/boards/brd4325a/src/rsi_board.c",
        #"${wisemcu_sdk_root}/platforms/si91x/boards/brd4325a/src/syscalls.c",
        "${wisemcu_sdk_root}/platforms/si91x/core/chip/src/rsi_deepsleep_commonflash.c",
        "${wisemcu_sdk_root}/platforms/si91x/core/chip/src/rsi_ps_ram_func.c",
        "${wisemcu_sdk_root}/platforms/si91x/core/chip/src/rsi_system_config.c",
        "${wisemcu_sdk_root}/platforms/si91x/core/chip/src/system_RS1xxxx.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/cmsis_driver/UDMA.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/cmsis_driver/USART.c",

        "${wisemcu_sdk_root}/platforms/si91x/drivers/peripheral_drivers/src/clock_update.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/peripheral_drivers/src/rsi_egpio.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/peripheral_drivers/src/rsi_udma_wrapper.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/peripheral_drivers/src/rsi_udma.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/peripheral_drivers/src/rsi_usart.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_ipmu.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_pll.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_power_save.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_rtc.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_temp_sensor.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_time_period.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_ulpss_clk.c",

        "${wisemcu_sdk_root}/platforms/si91x/drivers/peripheral_drivers/src/rsi_comparator.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_processor_sensor.c",
        "${wisemcu_sdk_root}/platforms/si91x/drivers/systemlevel/src/rsi_wwdt.c",

        # SAPI SRC FILES
        "${wisemcu_sdk_root}/sapi/wlan/rsi_wlan_apis.c",
        "${wisemcu_sdk_root}/sapi/common/rsi_apis_non_rom.c",
        "${wisemcu_sdk_root}/sapi/common/rsi_apis_rom.c",
        "${wisemcu_sdk_root}/sapi/common/rsi_common_apis.c",
        "${wisemcu_sdk_root}/sapi/common/rsi_device_init_apis.c",
        "${wisemcu_sdk_root}/sapi/driver/device_interface/spi/rsi_spi_frame_rd_wr.c",
        "${wisemcu_sdk_root}/sapi/driver/device_interface/spi/rsi_spi_functs.c",
        "${wisemcu_sdk_root}/sapi/driver/device_interface/spi/rsi_spi_iface_init.c",
        "${wisemcu_sdk_root}/sapi/driver/device_interface/spi/rsi_spi_mem_rd_wr.c",
        "${wisemcu_sdk_root}/sapi/driver/device_interface/spi/rsi_spi_reg_rd_wr.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_common.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_device_init.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_driver_event_handlers.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_driver.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_events_rom.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_events.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_iap.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_nwk_rom.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_nwk.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_pkt_mgmt_rom.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_pkt_mgmt.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_queue_rom.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_queue.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_scheduler_rom.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_scheduler.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_setregion_countryinfo.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_timer.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_utils_rom.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_utils.c",
        "${wisemcu_sdk_root}/sapi/driver/rsi_wlan.c",
        "${wisemcu_sdk_root}/sapi/rtos/freertos_wrapper/rsi_os_wrapper.c",
      ]

      public_deps = [
        ":si917_mbedtls_config",
        "${segger_rtt_root}:segger_rtt",
        "${segger_rtt_root}:segger_rtt_printf",
        "${segger_rtt_root}:segger_rtt_syscalls",
      ]

      if (defined(invoker.sources)) {
        sources += invoker.sources
      }

      public_configs = [ ":${sdk_target_name}_config" ]
    }
  }
}